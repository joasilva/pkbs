#!/bin/bash

NS=${PKEBS_NS:-pkbs}

opt_c=""
opt_N=""
opt_p=""
opt_P=""
opt_u=""

errr() {
	local message=$1

	echo "Error: $message" >&2
	exit 1
}

usage() {
	echo "Usage: qsub [OPTIONS] [PAYLOAD]"
	echo "If payload is not given, commands are read from the standard input."
	echo "Options are as follows"
	echo "    -h    show help"
	echo "    -N    name the job"
	echo "    -n    specify namespace"
	echo "    -p    upload path prefix"
	# FIXME echo "    -P    fixed upload path"
	echo "    -u    what to upload, one of files, zip or none"
	exit 1
}

submit_job() {
	local src=$1
	local dst=$2
 	local bytes=$(stat -c %s $src)
	local options=""

	[ -z "$opt_N" ] || options="-N $opt_N"
	[ -z "$opt_p" ] || options="$options -p $opt_p"
	[ -z "$opt_P" ] || options="$options -P $opt_P"
	[ -z "$opt_u" ] || options="$options -u $opt_u"
	[ -z "$opt_c" ] || options="$options -c $opt_c"

	# NATS message payload by default is up to 1 MB
	[ 1000000 -lt $bytes ] && errr "File $src is too large: $bytes bytes"

	kubectl -n $NS cp $src dispatcher:${dst} || errr "File transfer failed"
	kubectl -n $NS exec dispatcher -- /usr/src/app/dispatcher.py $options $dst || errr "Dispatch failed"
	unlink $src
}

qsub() {
	local src=$1
	local dst="$(mktemp -u -t qsub-XXXXXXXXXX).zip"

	if [ -f "$src" ] ; then
		[ -x "$src" ] || errr "File $src is not executable"
		zip -j -9 -q $dst $src || errr "Creating zip file failed"
		opt_c=$(basename $src)
	elif [ -d "$src" ] ; then
		local runfile=${src}/run.sh
		[ -f $runfile ] || errr "File $runfile not found"
		( cd $src && zip -9 -q -r $dst . ) || errr "Creating zip file failed"
	else
		errr "Unsupported payload type: $src"
	fi

	submit_job $dst $dst
}

while getopts "hN:n:p:u:" opt; do
    case $opt in
        h)
            usage
            ;;
        N)
            opt_N=$(echo $OPTARG | sed -e 's:[^A-Za-z0-9._\-]::g')
            ;;
		n)
            NS=$(echo $OPTARG | sed -e 's:[^A-Za-z0-9._\-]::g')
            ;;
        p)
            opt_p=$(echo $OPTARG | sed -e 's:[^A-Za-z0-9._/\-]::g' -e 's:^/::' -e 's:/$::')
            ;;
        P)
            opt_P=$(echo $OPTARG | sed -e 's:[^A-Za-z0-9._/\-]::g' -e 's:^/::' -e 's:/$::')
            ;;
        u)
            opt_u=$(echo $OPTARG | sed -e 's:[^A-Za-z0-9._/\-]::g')
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
    esac
done

shift $((OPTIND-1))

if [ 0 -ne $# ] ; then
	qsub "$1"
else
	# read input from stdin
	tmp=$(mktemp -t stdin.XXXXXXX)
	chmod u+x $tmp
	cat <&0 > $tmp
	opt_N="STDIN"
	qsub $tmp
	unlink $tmp
fi

exit $?
